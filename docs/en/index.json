[{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/","title":"Deploying Lambda@Edge with CloudFront Advanced Features","tags":[],"description":"","content":"AWS Workshop: Lambda@Edge \u0026amp; CloudFront Advanced Features Overview In this workshop, you will learn how to implement Edge Computing on AWS using Amazon CloudFront together with Lambda@Edge.\nYou will practice personalization, security enhancements, running A/B testing without a backend, and optimizing costs and performance with Edge Locations.\nContent  Introduction Preparation Steps Connecting, Testing \u0026amp; Verifying Functionality Logging sessions \u0026amp; measuring CloudFront performance Cost analysis \u0026amp; optimizing Edge Locations Cleaning up resources    üí° Note:\n Ensure you have the appropriate IAM Roles \u0026amp; Policies to run Lambda@Edge and manage CloudFront resources. Remember to clean up all resources after completing the lab to avoid unnecessary costs.   "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.1-create-s3/","title":"Create S3 Bucket","tags":[],"description":"","content":"üéØ Objective Create an S3 bucket to host a static website, serving as the origin for CloudFront.\n üõ†Ô∏è Steps   Open AWS Management Console ‚Üí S3 Service\nGo to AWS S3 Console.\n  Create a New Bucket\n  Click Create bucket\n  Bucket name: lambda-edge-demo-site\n  Region: us-east-1 (required for Lambda@Edge)\n  Uncheck Block all public access\n  Acknowledge the public access warning\n  Click Create bucket\n    Upload Website\n Create a file index.html with the following content:    \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Lambda@Edge Workshop\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome to AWS Lambda@Edge Workshop\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Click on the newly created bucket to Upload\n   Enable Static Website Hosting\n Open the bucket ‚Üí Select the Properties tab Scroll down to Static website hosting ‚Üí Click Edit Choose Enable Enter:  Index document: index.html Error document: index.html (or a custom error page if available)   Click Save changes    Set Bucket Policy (Public Access)\n Go to Permissions ‚Üí Bucket Policy ‚Üí Click Edit Paste the following policy (replace lambda-edge-demo-site with your bucket name):    { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;PublicReadGetObject\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: \u0026#34;*\u0026#34;, \u0026#34;Action\u0026#34;: \u0026#34;s3:GetObject\u0026#34;, \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:s3:::lambda-edge-demo-site/*\u0026#34; } ] }  Click Save  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/1-introduce/","title":"Introduction","tags":[],"description":"","content":"In modern web architecture, processing logic closer to users (at the network edge) can significantly reduce latency and improve performance. AWS Lambda@Edge allows you to run Lambda functions at Amazon CloudFront edge locations, enabling you to intercept and manipulate HTTP requests/responses before they reach the origin or before they are returned to the viewer.\nThis workshop walks you through building an intelligent content delivery system using CloudFront and Lambda@Edge, including the following advanced features:\n Geo-based content routing: redirect users to localized content based on country Serverless A/B Testing: run frontend experiments without a backend Enhanced security: block specific user-agents or countries; inject security headers Custom logging \u0026amp; performance monitoring: track request data directly at the edge Cost optimization and edge location selection: analyze cost/performance tradeoffs across CloudFront edge regions  By the end of this workshop, you\u0026rsquo;ll have deployed a modern, secure, and scalable static content architecture fully optimized for global delivery.\n"},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.2-create-cloudfront/","title":"Create CloudFront Distribution","tags":[],"description":"","content":"üéØ Objective Use Amazon CloudFront to distribute a static website from S3 globally with low latency, enhanced performance, and improved security.\n üõ†Ô∏è Detailed Step-by-Step Guide  Step 1 ‚Äì Open CloudFront Service  Navigate to AWS Management Console ‚Üí Search and select CloudFront. Click Create Distribution to start creating a new distribution.\n   Step 2 ‚Äì Initialization  Distribution name: Enter a name for easy management (e.g., lambda-edge-distribution). Description: (Optional) Add a short description. Distribution type: Select Single website or app.\n   Step 3 ‚Äì Configure Origin  Origin domain: Select the S3 bucket you created (lambda-edge-demo-site). Origin path: Leave blank. Viewer Protocol Policy: Choose Redirect HTTP to HTTPS to enforce HTTPS. Origin Access:  For demo ‚Üí keep as Public. For production ‚Üí enable Origin Access Control (OAC) to block direct access to S3.\n     Step 4 ‚Äì Security and Cache Behavior üîß Steps to Verify   Access the Distribution:\n Go to AWS Management Console ‚Üí CloudFront ‚Üí Distributions. Select the ID of the newly created Distribution.    Check Behavior:\n Open the Behaviors tab. Select Default (*) Behavior ‚Üí Edit to view details.    Verify configuration:\n Caching Policy: Should be CachingOptimized for optimal content delivery. Compress objects automatically: Enabled (Yes) to compress HTML, CSS, JS files. Viewer Protocol Policy: Redirect HTTP to HTTPS to ensure secure connections. Allowed HTTP Methods: GET, HEAD (add POST if the website has forms or APIs). TTL: Defaults to 86400 seconds (24 hours), can be left as is.     Step 5 ‚Äì SSL Certificate   SSL/TLS certificate:\n If you have a custom domain with a certificate in AWS Certificate Manager (ACM) ‚Üí choose Custom SSL Certificate. If you do not have a custom domain ‚Üí keep the Default CloudFront Certificate (AWS provides a free certificate for *.cloudfront.net).    Price class:\n Choose Use All Edge Locations for global distribution. Or select limited regions to reduce cost.    üìå Note:\n If using the default domain (*.cloudfront.net), keep the default settings and skip custom certificate configuration.   Step 6 ‚Äì Get Domain Name  Once the status shows Deployed, copy the Domain Name (e.g., dxxxxxxx.cloudfront.net). Open this domain in a browser to verify that the website is distributed through CloudFront.   ‚úÖ Result  The website is now distributed across CloudFront Edge Locations globally. Users worldwide will be served content from the nearest edge server, resulting in lower latency and faster page loads.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/2.3.1-ab-testing/","title":"Create Lambda@Edge Functions","tags":[],"description":"","content":"üéØ Objective Use AWS Lambda@Edge to deploy A/B Testing without the need for a backend. Users are randomly served between two static website versions stored in S3.\n Step 1 ‚Äì Create Lambda Function   Open AWS Management Console ‚Üí Search and select Lambda.\n  Click Create function.\n  Choose Author from scratch, then enter:\n Function name: ab-testing Runtime: Node.js 18.x Architecture: x86_64\n    Under Permissions, select:\n Create a new role with basic Lambda permissions.    Click Create function to finish.\n   Step 2 ‚Äì Write A/B Testing Code  After creating, open the ab-testing function. Go to the Code tab, remove the default code, and add:  \u0026#39;use strict\u0026#39;; exports.handler = async (event) =\u0026gt; { const request = event.Records[0].cf.request; const random = Math.random(); if (random \u0026lt; 0.5) { request.uri = \u0026#39;/index-v1.html\u0026#39;; } else { request.uri = \u0026#39;/index-v2.html\u0026#39;; } return request; }; Click Deploy to save the code.\n üîë IAM Role and Policy Configuration To avoid errors when deploying Lambda@Edge, you need to configure the role with full permissions:\n 1Ô∏è‚É£ Attach Required Policies  AWSLambdaBasicExecutionRole: Allows Lambda to write logs to CloudWatch. AWSLambdaRole: Basic permissions for Lambda to run and integrate with AWS services.  Steps  Go to AWS Console ‚Üí IAM ‚Üí Roles. Select the Role attached to the Lambda function (e.g., ab-testing-role). Go to Permissions ‚Üí Attach policies. Search and select:  AWSLambdaBasicExecutionRole AWSLambdaRole   Click Attach policy to save. Verify that both policies are present under Permissions.\n   2Ô∏è‚É£ Update Trust Relationship  Go to IAM ‚Üí Roles ‚Üí ab-testing-role (or the role you created). Open the Trust relationships tab ‚Üí Click Edit trust policy. Replace the content with:  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;lambda.amazonaws.com\u0026#34;, \u0026#34;edgelambda.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] } After adding the policy:\n Step 3 ‚Äì Publish Lambda Version Lambda@Edge requires a published version and cannot use $LATEST.\n In the Lambda function ‚Üí Click Actions ‚Üí Publish new version Enter Description (e.g., Initial AB Testing version) Click Publish to create a fixed version (e.g., Version 1)\n   Step 4 ‚Äì Deploy Lambda@Edge  In Lambda ‚Üí Click Actions ‚Üí Deploy to Lambda@Edge\n Choose:  CloudFront Distribution: the distribution you created CloudFront event: Viewer Request Region: us-east-1   Click Deploy and wait a few minutes for Lambda to replicate globally.\n   Step 5 ‚Äì Upload Website  Go to the S3 bucket that hosts your website. Upload:  index-v1.html    \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Cloud Technology - AWS Workshop\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.googleapis.com\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.gstatic.com\u0026#34; crossorigin\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;style\u0026gt; :root { --primary: #FF9900; --primary-dark: #E88A00; --secondary: #232F3E; --accent: #00A1E0; --text: #1A1A1A; --text-light: #4B5563; --background: #FFFFFF; --light-gray: #F3F4F6; --border: #E5E7EB; --rounded-sm: 4px; --rounded-md: 8px; --rounded-lg: 12px; --shadow-sm: 0 1px 3px rgba(0,0,0,0.1); --shadow-md: 0 4px 6px rgba(0,0,0,0.1); --shadow-lg: 0 10px 25px rgba(0,0,0,0.1); } body { font-family: \u0026#39;Inter\u0026#39;, sans-serif; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Master Cloud Technology with AWS\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  index-v2.html  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Cloud Technology - AWS Workshop\u0026lt;/title\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.googleapis.com\u0026#34;\u0026gt; \u0026lt;link rel=\u0026#34;preconnect\u0026#34; href=\u0026#34;https://fonts.gstatic.com\u0026#34; crossorigin\u0026gt; \u0026lt;link href=\u0026#34;https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700\u0026amp;display=swap\u0026#34; rel=\u0026#34;stylesheet\u0026#34;\u0026gt; \u0026lt;style\u0026gt; :root { --primary: #00A1E0; --primary-dark: #E88A00; --secondary: #232F3E; --accent: #00A1E0; --text: #1A1A1A; --text-light: #4B5563; --background: #FFFFFF; --light-gray: #F3F4F6; --border: #E5E7EB; --rounded-sm: 4px; --rounded-md: 8px; --rounded-lg: 12px; --shadow-sm: 0 1px 3px rgba(0,0,0,0.1); --shadow-md: 0 4px 6px rgba(0,0,0,0.1); --shadow-lg: 0 10px 25px rgba(0,0,0,0.1); } body { font-family: \u0026#39;Inter\u0026#39;, sans-serif; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;header\u0026gt; \u0026lt;h1\u0026gt;Master Cloud Technology with AWS - Version B\u0026lt;/h1\u0026gt; \u0026lt;/header\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  Make sure the files are publicly accessible or use OAC.   Step 6 ‚Äì Verify  Open your CloudFront Domain Name in the browser. Refresh multiple times:  Some requests will show Version A\n Some requests will show Version B\n   Confirm that Lambda is working correctly and distributing traffic 50/50.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/","title":"Create Lambda@Edge Functions","tags":[],"description":"","content":"üéØ Objective In this section, you will learn how to use AWS Lambda@Edge to extend CloudFront‚Äôs capabilities and add advanced features without a traditional backend.\nüìå Features  üîÄ A/B Testing üåç Geo Redirect (Personalization) üö´ Block by User-Agent or Country üìä Logging and Monitoring üõ°Ô∏è Add Security Headers   Each feature has its own sub-section with step-by-step instructions and ready-to-use Lambda functions.\n"},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/2.3.2-geo-redirect/","title":"Implement Geo Redirect with Lambda@Edge","tags":[],"description":"","content":"üéØ Objective  Automatically redirect users to the website page that matches their country. Use AWS Lambda@Edge (attached to CloudFront) to redirect before requests hit S3. Support multiple languages, easily scalable for future needs.   1Ô∏è‚É£ Architecture Overview  User ‚Üí CloudFront Distribution. CloudFront sends the CloudFront-Viewer-Country header. Lambda@Edge reads the header and detects the country. Lambda returns an HTTP 302 Redirect to the corresponding language page. The browser loads content from S3 bucket containing language-specific versions.   2Ô∏è‚É£ Create Lambda Function  Log in to AWS Management Console ‚Üí Lambda. Click Create function ‚Üí Author from scratch. Fill in:  Function name: geo-redirect Runtime: Node.js 18.x Architecture: x86_64   Permissions: select Create a new role with basic Lambda permissions. Click Create function.    3Ô∏è‚É£ Write Geo Redirect Code \u0026#39;use strict\u0026#39;; exports.handler = async (event) =\u0026gt; { const request = event.Records[0].cf.request; const headers = request.headers; const country = headers[\u0026#39;cloudfront-viewer-country\u0026#39;] ? headers[\u0026#39;cloudfront-viewer-country\u0026#39;][0].value : \u0026#39;US\u0026#39;; const redirectMap = { \u0026#39;VN\u0026#39;: \u0026#39;/vi/index.html\u0026#39;, \u0026#39;FR\u0026#39;: \u0026#39;/fr/index.html\u0026#39;, \u0026#39;US\u0026#39;: \u0026#39;/en/index.html\u0026#39; }; const redirectUrl = redirectMap[country] || \u0026#39;/en/index.html\u0026#39;; return { status: \u0026#39;302\u0026#39;, statusDescription: \u0026#39;Found\u0026#39;, headers: { \u0026#39;location\u0026#39;: [{ key: \u0026#39;Location\u0026#39;, value: redirectUrl }], \u0026#39;cache-control\u0026#39;: [{ key: \u0026#39;Cache-Control\u0026#39;, value: \u0026#39;no-cache\u0026#39; }] }, }; };  Use redirectMap for easier maintenance. Add Cache-Control to avoid caching incorrect redirects.  Click Deploy to save.\n 4Ô∏è‚É£ Configure IAM Role and Policy Attach Policies:  AWSLambdaBasicExecutionRole AWSLambdaRole  Steps:\n Go to AWS ‚Üí IAM ‚Üí Roles ‚Üí Select your Lambda role. Permissions ‚Üí Attach policies ‚Üí Choose both policies ‚Üí Attach.   Update Trust Relationship:  IAM ‚Üí Roles ‚Üí geo-redirect-role Trust relationships ‚Üí Edit trust policy Paste:  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;lambda.amazonaws.com\u0026#34;, \u0026#34;edgelambda.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] }  5Ô∏è‚É£ Prepare Multilingual Content HTML Files:  /en/index.html ‚Äì English  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Welcome\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welcome to our website!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;This is the English version of the site.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  /vi/index.html ‚Äì Vietnamese  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;vi\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Ch√†o m·ª´ng\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi website c·ªßa ch√∫ng t√¥i!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;ƒê√¢y l√† phi√™n b·∫£n ti·∫øng Vi·ªát c·ªßa trang.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  /fr/index.html ‚Äì French  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;fr\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Bienvenue\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Bienvenue sur notre site web!\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Ceci est la version fran√ßaise du site.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Upload to S3:  Go to S3 ‚Üí Bucket. Create folder: en, vi, fr. Upload the corresponding index.html file.  Access Permissions:  Demo: Actions ‚Üí Make public. Production: Use CloudFront OAC (do not make public directly).    6Ô∏è‚É£ Publish Lambda Version  Go to Lambda ‚Üí Actions ‚Üí Publish new version\n Enter a description Initial Geo Redirect version ‚Üí Publish    7Ô∏è‚É£ Deploy Lambda@Edge  In Lambda ‚Üí Select the published version Actions ‚Üí Deploy to Lambda@Edge  Choose:  CloudFront Distribution Event: Viewer Request Region: us-east-1   Click Deploy ‚Üí Wait a few minutes for global replication.    8Ô∏è‚É£ Testing  Open https://\u0026lt;CloudFront-Domain\u0026gt; ‚Üí It should automatically redirect based on the user‚Äôs country. Test with VPN or:  curl -I -H \u0026#34;CloudFront-Viewer-Country: VN\u0026#34; https://\u0026lt;CloudFront-Domain\u0026gt;  Expected result:    9Ô∏è‚É£ Advanced Enhancements  Use cookies to remember user‚Äôs selected language. Consider CloudFront Functions for simple logic (lower cost). Add AWS WAF to control or block by region.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/","title":"Preparation ","tags":[],"description":"","content":"üéØ Objective This section covers the necessary preparations for deploying the AWS Lambda@Edge Workshop, including:\n üîë Preparation Steps   Create a Static Website using S3\n Set up an S3 bucket to store website content. Enable Static Website Hosting and configure Bucket Policy for public access.    Create a CloudFront Distribution\n Distribute the website globally with low latency using Amazon CloudFront. Configure caching, SSL certificate, and behaviors for optimal performance.    Create Lambda@Edge Functions\n Write and deploy Lambda functions to run at CloudFront Edge Locations. Use for personalization (Geo Redirect, A/B Testing) and security (User-Agent, Country Blocking).     ‚ö†Ô∏è Note:\n Follow the steps sequentially to avoid permission and access errors. Use AWS Region us-east-1 to ensure Lambda@Edge works properly.   üëâ Select a subtopic in the menu to start.\n"},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/2.3.3-block-useragent-country/","title":"Block access by User-Agent or Country with Lambda@Edge","tags":[],"description":"","content":"üéØ Objective Enhance security by blocking access from certain User-Agents (e.g., bots) or unwanted countries using AWS Lambda@Edge.\n Step 1 ‚Äì Create Lambda Function  Open AWS Management Console ‚Üí Lambda. Click Create function. Select Author from scratch, then enter:  Function name: block-ua-country Runtime: Node.js 18.x Architecture: x86_64   In Permissions, choose:  Create a new role with basic Lambda permissions.   Click Create function.    Step 2 ‚Äì Write Code to Block User-Agent or Country  After creation, open the block-ua-country function. In the Code tab, delete the default code and add:  \u0026#39;use strict\u0026#39;; exports.handler = async (event) =\u0026gt; { const request = event.Records[0].cf.request; const headers = request.headers; const userAgent = headers[\u0026#39;user-agent\u0026#39;] ? headers[\u0026#39;user-agent\u0026#39;][0].value.toLowerCase() : \u0026#39;\u0026#39;; const country = headers[\u0026#39;cloudfront-viewer-country\u0026#39;] ? headers[\u0026#39;cloudfront-viewer-country\u0026#39;][0].value : \u0026#39;US\u0026#39;; // Block bots using curl or traffic from China (CN)  if (userAgent.includes(\u0026#39;curl\u0026#39;) || country === \u0026#39;CN\u0026#39;) { return { status: \u0026#39;403\u0026#39;, statusDescription: \u0026#39;Forbidden\u0026#39;, body: \u0026#39;Access denied.\u0026#39;, }; } return request; }; Click Deploy to save the code.    üîë Configure IAM Role and Policy 1Ô∏è‚É£ Attach Necessary Policies  AWSLambdaBasicExecutionRole AWSLambdaRole  Steps:\n Go to AWS Console ‚Üí IAM ‚Üí Roles. Select the Role attached to the Lambda Function. Go to Add Permissions ‚Üí Attach policies. Attach AWSLambdaBasicExecutionRole and AWSLambdaRole. Click Attach policy to save.    2Ô∏è‚É£ Edit Trust Relationship  Go to IAM ‚Üí Roles ‚Üí block-ua-country-role. Open the Trust relationships ‚Üí Edit trust policy tab. Replace content with:  { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Principal\u0026#34;: { \u0026#34;Service\u0026#34;: [ \u0026#34;lambda.amazonaws.com\u0026#34;, \u0026#34;edgelambda.amazonaws.com\u0026#34; ] }, \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34; } ] }  Step 3 ‚Äì Publish Lambda Version Lambda@Edge requires a published version and cannot use $LATEST.\n In the Lambda function ‚Üí Click Actions ‚Üí Publish new version. Enter a Description (e.g., Initial Block UA/Country version). Click Publish to create a fixed version.    Step 4 ‚Äì Deploy Lambda@Edge  In Lambda ‚Üí Select the published version. Click Actions ‚Üí Deploy to Lambda@Edge.  Choose:  CloudFront Distribution CloudFront event: Viewer Request Region: us-east-1   Click Deploy and wait a few minutes for the Lambda to propagate globally.    Step 5 ‚Äì Testing  Use curl to test a blocked User-Agent:  curl -I -A \u0026#34;curl/7.79.1\u0026#34; https://\u0026lt;cloudfront-domain\u0026gt;/  Expected result: 403 Forbidden.  Use VPN or a header to simulate traffic from China (CN):  curl -I -H \u0026#34;CloudFront-Viewer-Country: CN\u0026#34; https://\u0026lt;cloudfront-domain\u0026gt;/   Expected result: 403 Forbidden.\n  With normal User-Agent and country ‚Üí website remains accessible.\n   ‚úÖ Result: Lambda@Edge blocks access from unwanted User-Agents or countries, returning 403 Forbidden.\n"},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/3-testing/","title":"Connect, Test, and Verify Functionality","tags":[],"description":"","content":"üéØ Objective Ensure that the Lambda@Edge application works correctly by connecting, testing, and verifying results.\n 1Ô∏è‚É£ Connect  Verify that the CloudFront domain is linked with Lambda. Use a browser or the curl tool to send HTTP requests:  curl -I https://\u0026lt;CloudFront-Domain\u0026gt;  2Ô∏è‚É£ Test functionality  Refresh multiple times to confirm different versions (A/B testing) or Geo Redirect are functioning. Use VPN to simulate different geographic locations and test geo-redirect. Open browser ‚Üí F12 ‚Üí Network to check HTTP headers and response content.   3Ô∏è‚É£ Verify results  Check the returned HTTP status code:  200 OK ‚Üí Page loads normally. 302 Found ‚Üí Geo Redirect is working correctly.   Confirm that the correct HTML file is delivered to the user.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/2.3.4-logging-monitoring/","title":"Logging and Performance Monitoring","tags":[],"description":"","content":"üéØ Objective Record detailed logs and monitor application performance using AWS Lambda@Edge and CloudFront:\n Enable logging for easier debugging and control. Monitor performance through CloudWatch Metrics and Alarms.   1Ô∏è‚É£ Enable Logging in Lambda Add logs for debugging and monitoring:\n\u0026#39;use strict\u0026#39;; exports.handler = async (event) =\u0026gt; { const request = event.Records[0].cf.request; const headers = request.headers; const userAgent = headers[\u0026#39;user-agent\u0026#39;] ? headers[\u0026#39;user-agent\u0026#39;][0].value.toLowerCase() : \u0026#39;\u0026#39;; const country = headers[\u0026#39;cloudfront-viewer-country\u0026#39;] ? headers[\u0026#39;cloudfront-viewer-country\u0026#39;][0].value : \u0026#39;US\u0026#39;; console.log(\u0026#34;User-Agent:\u0026#34;, userAgent); console.log(\u0026#34;Country:\u0026#34;, country); if (userAgent.includes(\u0026#39;curl\u0026#39;) || country === \u0026#39;CN\u0026#39;) { console.log(\u0026#34;Access blocked for\u0026#34;, userAgent, country); return { status: \u0026#39;403\u0026#39;, statusDescription: \u0026#39;Forbidden\u0026#39;, body: \u0026#39;Access denied.\u0026#39;, }; } console.log(\u0026#34;Request allowed\u0026#34;); return request; };  When Lambda is invoked, logs will appear in CloudWatch ‚Üí Log Groups ‚Üí /aws/lambda/us-east-1..    2Ô∏è‚É£ Enable Logging for CloudFront  Go to AWS CloudFront ‚Üí Distribution ‚Üí Settings ‚Üí Edit. In the Logging section, enable:  ‚úÖ Standard Logging: select an S3 bucket to store logs. ‚úÖ Real-time logs (optional): capture requests instantly.   Save the changes.    3Ô∏è‚É£ Monitor Performance with CloudWatch Metrics \u0026amp; Alarms   Go to CloudWatch ‚Üí Metrics ‚Üí Lambda ‚Üí By Function Name.\n  Monitor key metrics:\n Invocations: Number of times Lambda is invoked. Errors: Number of errors. Duration: Lambda execution time. Throttles: Number of times execution was throttled.     Create CloudWatch Alarms to alert when:\n Error rate \u0026gt; 5%. Execution time exceeds normal limits.     Enable X-Ray Tracing for Lambda to analyze request details.\n   Open AWS Lambda Console ‚Üí Select your function (e.g., block-ua-country). Go to the Configuration tab. From the left menu ‚Üí Select Monitoring and operations tools. Under AWS X-Ray ‚Üí Check Active tracing. Click Save to apply changes.   ‚úÖ Result  Complete logging for easier debugging. Effective monitoring and alerting for Lambda and CloudFront performance.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/4-logging-performance/","title":"Session Logging and CloudFront Performance Measurement","tags":[],"description":"","content":"üéØ Objective Enable logging and measure performance to monitor and optimize Lambda@Edge applications with CloudFront.\n 1Ô∏è‚É£ Enable session logging  Go to AWS CloudFront ‚Üí Distributions ‚Üí Settings ‚Üí Edit. Enable Standard Logging and choose an S3 bucket to store logs. (Optional) Enable Real-time logs for immediate log visibility. Check logs in S3 bucket ‚Üí AWSLogs/\u0026lt;account-id\u0026gt;/CloudFront/ folder.   2Ô∏è‚É£ Measure performance  Use CloudWatch Metrics to monitor:  Response time (Latency) Error rate Traffic volume   Create CloudWatch Alarms to alert when:  Error rate \u0026gt; 5%. Response time exceeds the threshold.     3Ô∏è‚É£ Analyze data  Use AWS Athena or other analysis tools to read logs from S3. Identify bottlenecks and optimize Lambda code or CloudFront configuration.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/5-cost-optimization/","title":"Cost Analysis and Optimal Edge Location Selection","tags":[],"description":"","content":"üéØ Objective Analyze operational costs of Lambda@Edge and select optimal Edge Locations to reduce costs and latency.\n 1Ô∏è‚É£ Analyze costs  Go to AWS Cost Explorer:  View Lambda invocation costs. Analyze CloudFront and data transfer costs.   Identify regions incurring high costs.   2Ô∏è‚É£ Select optimal Edge Locations  Use CloudFront Reports to understand user traffic distribution. Select Edge Locations closest to users to minimize latency and transfer costs.   3Ô∏è‚É£ Optimize costs  Configure Caching and appropriate TTL to reduce Lambda calls. Use Regional Edge Cache for less frequently accessed areas. Enable asset compression to reduce data transfer size.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/6-cleanup/","title":"Clean up resources","tags":[],"description":"","content":"\u0026ndash;\nüéØ Objective Analyze the cost of running Lambda@Edge and select optimal Edge Locations to minimize expenses.\n 1Ô∏è‚É£ Cost Analysis  Use AWS Cost Explorer to review:  Lambda costs CloudFront and data transfer costs   Identify high-cost regions.   2Ô∏è‚É£ Optimal Location Selection  Based on user distribution and CloudFront reports. Choose Edge Locations closest to users to reduce latency and transfer costs.   3Ô∏è‚É£ Optimization  Utilize caching and appropriate TTLs to reduce Lambda invocations. Consider using Regional Edge Cache for low-traffic regions.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/2-prerequiste/2.3-create-lambdaedge/2.3.5-security-headers/","title":"","tags":[],"description":"","content":"üéØ Objective Enhance application security by adding HTTP Security Headers to every response from CloudFront using AWS Lambda@Edge.\n 1Ô∏è‚É£ Write Lambda Code to Add Security Headers Use Lambda@Edge with the Viewer Response event:\n\u0026#39;use strict\u0026#39;; exports.handler = async (event) =\u0026gt; { const response = event.Records[0].cf.response; const headers = response.headers; // Add Security Headers  headers[\u0026#39;strict-transport-security\u0026#39;] = [{ key: \u0026#39;Strict-Transport-Security\u0026#39;, value: \u0026#39;max-age=63072000; includeSubdomains; preload\u0026#39; }]; headers[\u0026#39;content-security-policy\u0026#39;] = [{ key: \u0026#39;Content-Security-Policy\u0026#39;, value: \u0026#34;default-src \u0026#39;self\u0026#39;\u0026#34; }]; headers[\u0026#39;x-content-type-options\u0026#39;] = [{ key: \u0026#39;X-Content-Type-Options\u0026#39;, value: \u0026#39;nosniff\u0026#39; }]; headers[\u0026#39;x-frame-options\u0026#39;] = [{ key: \u0026#39;X-Frame-Options\u0026#39;, value: \u0026#39;DENY\u0026#39; }]; headers[\u0026#39;referrer-policy\u0026#39;] = [{ key: \u0026#39;Referrer-Policy\u0026#39;, value: \u0026#39;same-origin\u0026#39; }]; headers[\u0026#39;permissions-policy\u0026#39;] = [{ key: \u0026#39;Permissions-Policy\u0026#39;, value: \u0026#39;geolocation=(), microphone=()\u0026#39; }]; return response; };  2Ô∏è‚É£ Deploy Lambda@Edge  Open Lambda ‚Üí Click Actions ‚Üí Publish new version ‚Üí Enter description (e.g., Add Security Headers). Deploy Lambda with CloudFront event = Viewer Response. After deployment, every response from CloudFront will automatically include these security headers.   3Ô∏è‚É£ Verify Security Headers After deploying Lambda@Edge to add Security Headers, you can verify them as follows:\nüñ•Ô∏è 1. Using cURL Run the command on your computer or AWS CloudShell:\ncurl -I https://\u0026lt;CloudFront-Domain\u0026gt; The correct result: HTTP status code 200 OK (or 302 if there is a redirect)\n‚úÖ Expected Result  Your website is enhanced with HTTP Security Headers. Mitigates risks of XSS attacks, clickjacking, and data exposure.  "},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://hoang1phuc.github.io/FJC-Workshop/en/tags/","title":"Tags","tags":[],"description":"","content":""}]